The 0-add_integer module
======================

Using add_integer function
-------------------


>>> add_integer = __import__("0-add_integer").add_integer


-----------------------------
----Case 1: Integers only----
-----------------------------

>>> add_integer(1, 2)
3

>>> add_integer(2)
100

>>> add_integer(0)
98

--------------------------------------
----Case 2: integer and empty/None----
--------------------------------------

>>> add_integer(2, )
100

>>> add_integer(2,)
100

>>> add_integer(, 3)
Traceback (most recent call last):
SyntaxError: invalid syntax

>>> add_integer( , )
Traceback (most recent call last):
SyntaxError: invalid syntax

>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(None, None)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'

---------------------------
----Case 3: type mixing----
---------------------------

>>> add_integer(3, "a")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer("aa", "none")
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer("", None)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer("a", )
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer("a", 46)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(4.5, 4.5)
8

>>> add_integer(4, 4.5)
8

>>> add_integer(4.5, 4)
8

>>> add_integer("aa", 3.4)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(2.45, "none")
Traceback (most recent call last):
TypeError: b must be an integer
